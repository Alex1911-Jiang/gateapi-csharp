/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get portfolio account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>PortfolioAccount</returns>
        PortfolioAccount ListPortfolioAccounts (string currency = default(string));

        /// <summary>
        /// Get portfolio account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of PortfolioAccount</returns>
        ApiResponse<PortfolioAccount> ListPortfolioAccountsWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve the account&#39;s portfolio mode
        /// </summary>
        /// <remarks>
        /// cross_margin - cross margin
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, bool&gt;</returns>
        Dictionary<string, bool> ListAccountPortfolioMode ();

        /// <summary>
        /// Retrieve the account&#39;s portfolio mode
        /// </summary>
        /// <remarks>
        /// cross_margin - cross margin
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, bool&gt;</returns>
        ApiResponse<Dictionary<string, bool>> ListAccountPortfolioModeWithHttpInfo ();
        /// <summary>
        /// Configure the account&#39;s portfolio mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioMode"></param>
        /// <returns>Dictionary&lt;string, bool&gt;</returns>
        Dictionary<string, bool> SetAccountPortfolioMode (PortfolioMode portfolioMode);

        /// <summary>
        /// Configure the account&#39;s portfolio mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioMode"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, bool&gt;</returns>
        ApiResponse<Dictionary<string, bool>> SetAccountPortfolioModeWithHttpInfo (PortfolioMode portfolioMode);
        /// <summary>
        /// Retrieve the maximum borrowable amount for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>PortfolioBorrowable</returns>
        PortfolioBorrowable GetPortfolioBorrowable (string currency);

        /// <summary>
        /// Retrieve the maximum borrowable amount for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of PortfolioBorrowable</returns>
        ApiResponse<PortfolioBorrowable> GetPortfolioBorrowableWithHttpInfo (string currency);
        /// <summary>
        /// Retrieve the maximum amount that can be transferred out from the account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>PortfolioTransferable</returns>
        PortfolioTransferable GetPortfolioTransferable (string currency);

        /// <summary>
        /// Retrieve the maximum amount that can be transferred out from the account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of PortfolioTransferable</returns>
        ApiResponse<PortfolioTransferable> GetPortfolioTransferableWithHttpInfo (string currency);
        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoan&gt;</returns>
        List<UniLoan> ListPortfolioUniLoanInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoan&gt;</returns>
        ApiResponse<List<UniLoan>> ListPortfolioUniLoanInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioLoan"></param>
        /// <returns></returns>
        void CreatePortfolioLoan (PortfolioLoan portfolioLoan);

        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioLoan"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreatePortfolioLoanWithHttpInfo (PortfolioLoan portfolioLoan);
        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;PortfolioLoanRecord&gt;</returns>
        List<PortfolioLoanRecord> ListPortfolioLoanRecords (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;PortfolioLoanRecord&gt;</returns>
        ApiResponse<List<PortfolioLoanRecord>> ListPortfolioLoanRecordsWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        List<UniLoanInterestRecord> ListPortfolioLoanInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        ApiResponse<List<UniLoanInterestRecord>> ListPortfolioLoanInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get portfolio account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of PortfolioAccount</returns>
        Task<PortfolioAccount> ListPortfolioAccountsAsync (string currency = default(string));

        /// <summary>
        /// Get portfolio account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioAccount)</returns>
        Task<ApiResponse<PortfolioAccount>> ListPortfolioAccountsAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve the account&#39;s portfolio mode
        /// </summary>
        /// <remarks>
        /// cross_margin - cross margin
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, bool&gt;</returns>
        Task<Dictionary<string, bool>> ListAccountPortfolioModeAsync ();

        /// <summary>
        /// Retrieve the account&#39;s portfolio mode
        /// </summary>
        /// <remarks>
        /// cross_margin - cross margin
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool&gt;)</returns>
        Task<ApiResponse<Dictionary<string, bool>>> ListAccountPortfolioModeAsyncWithHttpInfo ();
        /// <summary>
        /// Configure the account&#39;s portfolio mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioMode"></param>
        /// <returns>Task of Dictionary&lt;string, bool&gt;</returns>
        Task<Dictionary<string, bool>> SetAccountPortfolioModeAsync (PortfolioMode portfolioMode);

        /// <summary>
        /// Configure the account&#39;s portfolio mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioMode"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool&gt;)</returns>
        Task<ApiResponse<Dictionary<string, bool>>> SetAccountPortfolioModeAsyncWithHttpInfo (PortfolioMode portfolioMode);
        /// <summary>
        /// Retrieve the maximum borrowable amount for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of PortfolioBorrowable</returns>
        Task<PortfolioBorrowable> GetPortfolioBorrowableAsync (string currency);

        /// <summary>
        /// Retrieve the maximum borrowable amount for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (PortfolioBorrowable)</returns>
        Task<ApiResponse<PortfolioBorrowable>> GetPortfolioBorrowableAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Retrieve the maximum amount that can be transferred out from the account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of PortfolioTransferable</returns>
        Task<PortfolioTransferable> GetPortfolioTransferableAsync (string currency);

        /// <summary>
        /// Retrieve the maximum amount that can be transferred out from the account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (PortfolioTransferable)</returns>
        Task<ApiResponse<PortfolioTransferable>> GetPortfolioTransferableAsyncWithHttpInfo (string currency);
        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoan&gt;</returns>
        Task<List<UniLoan>> ListPortfolioUniLoanInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoan&gt;)</returns>
        Task<ApiResponse<List<UniLoan>>> ListPortfolioUniLoanInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioLoan"></param>
        /// <returns>Task of void</returns>
        Task CreatePortfolioLoanAsync (PortfolioLoan portfolioLoan);

        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioLoan"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> CreatePortfolioLoanAsyncWithHttpInfo (PortfolioLoan portfolioLoan);
        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;PortfolioLoanRecord&gt;</returns>
        Task<List<PortfolioLoanRecord>> ListPortfolioLoanRecordsAsync (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;PortfolioLoanRecord&gt;)</returns>
        Task<ApiResponse<List<PortfolioLoanRecord>>> ListPortfolioLoanRecordsAsyncWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        Task<List<UniLoanInterestRecord>> ListPortfolioLoanInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        Task<ApiResponse<List<UniLoanInterestRecord>>> ListPortfolioLoanInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioApi : IPortfolioApiSync, IPortfolioApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortfolioApi : IPortfolioApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfolioApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfolioApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortfolioApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PortfolioApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get portfolio account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>PortfolioAccount</returns>
        public PortfolioAccount ListPortfolioAccounts (string currency = default(string))
        {
             ApiResponse<PortfolioAccount> localVarResponse = ListPortfolioAccountsWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get portfolio account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of PortfolioAccount</returns>
        public ApiResponse<PortfolioAccount> ListPortfolioAccountsWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<PortfolioAccount>("/portfolio/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPortfolioAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get portfolio account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of PortfolioAccount</returns>
        public async Task<PortfolioAccount> ListPortfolioAccountsAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<PortfolioAccount> localVarResponse = await ListPortfolioAccountsAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get portfolio account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioAccount)</returns>
        public async Task<ApiResponse<PortfolioAccount>> ListPortfolioAccountsAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PortfolioAccount>("/portfolio/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPortfolioAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the account&#39;s portfolio mode cross_margin - cross margin
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, bool&gt;</returns>
        public Dictionary<string, bool> ListAccountPortfolioMode ()
        {
             ApiResponse<Dictionary<string, bool>> localVarResponse = ListAccountPortfolioModeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the account&#39;s portfolio mode cross_margin - cross margin
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, bool&gt;</returns>
        public ApiResponse<Dictionary<string, bool>> ListAccountPortfolioModeWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, bool>>("/portfolio/account_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountPortfolioMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the account&#39;s portfolio mode cross_margin - cross margin
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, bool&gt;</returns>
        public async Task<Dictionary<string, bool>> ListAccountPortfolioModeAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<Dictionary<string, bool>> localVarResponse = await ListAccountPortfolioModeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the account&#39;s portfolio mode cross_margin - cross margin
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool&gt;)</returns>
        public async Task<ApiResponse<Dictionary<string, bool>>> ListAccountPortfolioModeAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, bool>>("/portfolio/account_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountPortfolioMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the account&#39;s portfolio mode. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioMode"></param>
        /// <returns>Dictionary&lt;string, bool&gt;</returns>
        public Dictionary<string, bool> SetAccountPortfolioMode (PortfolioMode portfolioMode)
        {
             ApiResponse<Dictionary<string, bool>> localVarResponse = SetAccountPortfolioModeWithHttpInfo(portfolioMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Configure the account&#39;s portfolio mode. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioMode"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, bool&gt;</returns>
        public ApiResponse<Dictionary<string, bool>> SetAccountPortfolioModeWithHttpInfo (PortfolioMode portfolioMode)
        {
            // verify the required parameter 'portfolioMode' is set
            if (portfolioMode == null)
                throw new ApiException(400, "Missing required parameter 'portfolioMode' when calling PortfolioApi->SetAccountPortfolioMode");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = portfolioMode;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, bool>>("/portfolio/account_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAccountPortfolioMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the account&#39;s portfolio mode. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioMode"></param>
        /// <returns>Task of Dictionary&lt;string, bool&gt;</returns>
        public async Task<Dictionary<string, bool>> SetAccountPortfolioModeAsync (PortfolioMode portfolioMode)
        {
             Io.Gate.GateApi.Client.ApiResponse<Dictionary<string, bool>> localVarResponse = await SetAccountPortfolioModeAsyncWithHttpInfo(portfolioMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Configure the account&#39;s portfolio mode. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioMode"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool&gt;)</returns>
        public async Task<ApiResponse<Dictionary<string, bool>>> SetAccountPortfolioModeAsyncWithHttpInfo (PortfolioMode portfolioMode)
        {
            // verify the required parameter 'portfolioMode' is set
            if (portfolioMode == null)
                throw new ApiException(400, "Missing required parameter 'portfolioMode' when calling PortfolioApi->SetAccountPortfolioMode");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = portfolioMode;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, bool>>("/portfolio/account_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAccountPortfolioMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the maximum borrowable amount for the account. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>PortfolioBorrowable</returns>
        public PortfolioBorrowable GetPortfolioBorrowable (string currency)
        {
             ApiResponse<PortfolioBorrowable> localVarResponse = GetPortfolioBorrowableWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the maximum borrowable amount for the account. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of PortfolioBorrowable</returns>
        public ApiResponse<PortfolioBorrowable> GetPortfolioBorrowableWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PortfolioApi->GetPortfolioBorrowable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<PortfolioBorrowable>("/portfolio/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the maximum borrowable amount for the account. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of PortfolioBorrowable</returns>
        public async Task<PortfolioBorrowable> GetPortfolioBorrowableAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<PortfolioBorrowable> localVarResponse = await GetPortfolioBorrowableAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the maximum borrowable amount for the account. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (PortfolioBorrowable)</returns>
        public async Task<ApiResponse<PortfolioBorrowable>> GetPortfolioBorrowableAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PortfolioApi->GetPortfolioBorrowable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PortfolioBorrowable>("/portfolio/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the maximum amount that can be transferred out from the account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>PortfolioTransferable</returns>
        public PortfolioTransferable GetPortfolioTransferable (string currency)
        {
             ApiResponse<PortfolioTransferable> localVarResponse = GetPortfolioTransferableWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the maximum amount that can be transferred out from the account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of PortfolioTransferable</returns>
        public ApiResponse<PortfolioTransferable> GetPortfolioTransferableWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PortfolioApi->GetPortfolioTransferable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<PortfolioTransferable>("/portfolio/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the maximum amount that can be transferred out from the account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of PortfolioTransferable</returns>
        public async Task<PortfolioTransferable> GetPortfolioTransferableAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<PortfolioTransferable> localVarResponse = await GetPortfolioTransferableAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the maximum amount that can be transferred out from the account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (PortfolioTransferable)</returns>
        public async Task<ApiResponse<PortfolioTransferable>> GetPortfolioTransferableAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PortfolioApi->GetPortfolioTransferable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PortfolioTransferable>("/portfolio/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoan&gt;</returns>
        public List<UniLoan> ListPortfolioUniLoanInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<UniLoan>> localVarResponse = ListPortfolioUniLoanInterestRecordsWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoan&gt;</returns>
        public ApiResponse<List<UniLoan>> ListPortfolioUniLoanInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoan>>("/portfolio/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPortfolioUniLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoan&gt;</returns>
        public async Task<List<UniLoan>> ListPortfolioUniLoanInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoan>> localVarResponse = await ListPortfolioUniLoanInterestRecordsAsyncWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoan&gt;)</returns>
        public async Task<ApiResponse<List<UniLoan>>> ListPortfolioUniLoanInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoan>>("/portfolio/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPortfolioUniLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioLoan"></param>
        /// <returns></returns>
        public void CreatePortfolioLoan (PortfolioLoan portfolioLoan)
        {
             CreatePortfolioLoanWithHttpInfo(portfolioLoan);
        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioLoan"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreatePortfolioLoanWithHttpInfo (PortfolioLoan portfolioLoan)
        {
            // verify the required parameter 'portfolioLoan' is set
            if (portfolioLoan == null)
                throw new ApiException(400, "Missing required parameter 'portfolioLoan' when calling PortfolioApi->CreatePortfolioLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = portfolioLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/portfolio/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePortfolioLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioLoan"></param>
        /// <returns>Task of void</returns>
        public async Task CreatePortfolioLoanAsync (PortfolioLoan portfolioLoan)
        {
             await CreatePortfolioLoanAsyncWithHttpInfo(portfolioLoan);

        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioLoan"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> CreatePortfolioLoanAsyncWithHttpInfo (PortfolioLoan portfolioLoan)
        {
            // verify the required parameter 'portfolioLoan' is set
            if (portfolioLoan == null)
                throw new ApiException(400, "Missing required parameter 'portfolioLoan' when calling PortfolioApi->CreatePortfolioLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = portfolioLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/portfolio/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePortfolioLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;PortfolioLoanRecord&gt;</returns>
        public List<PortfolioLoanRecord> ListPortfolioLoanRecords (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<PortfolioLoanRecord>> localVarResponse = ListPortfolioLoanRecordsWithHttpInfo(type, currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;PortfolioLoanRecord&gt;</returns>
        public ApiResponse<List<PortfolioLoanRecord>> ListPortfolioLoanRecordsWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PortfolioLoanRecord>>("/portfolio/loan_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPortfolioLoanRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;PortfolioLoanRecord&gt;</returns>
        public async Task<List<PortfolioLoanRecord>> ListPortfolioLoanRecordsAsync (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<PortfolioLoanRecord>> localVarResponse = await ListPortfolioLoanRecordsAsyncWithHttpInfo(type, currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;PortfolioLoanRecord&gt;)</returns>
        public async Task<ApiResponse<List<PortfolioLoanRecord>>> ListPortfolioLoanRecordsAsyncWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PortfolioLoanRecord>>("/portfolio/loan_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPortfolioLoanRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        public List<UniLoanInterestRecord> ListPortfolioLoanInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<UniLoanInterestRecord>> localVarResponse = ListPortfolioLoanInterestRecordsWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        public ApiResponse<List<UniLoanInterestRecord>> ListPortfolioLoanInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoanInterestRecord>>("/portfolio/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPortfolioLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        public async Task<List<UniLoanInterestRecord>> ListPortfolioLoanInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoanInterestRecord>> localVarResponse = await ListPortfolioLoanInterestRecordsAsyncWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        public async Task<ApiResponse<List<UniLoanInterestRecord>>> ListPortfolioLoanInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoanInterestRecord>>("/portfolio/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPortfolioLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
