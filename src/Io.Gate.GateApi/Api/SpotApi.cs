/*
 * Gate API v4
 *
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all currency pairs supported
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CurrencyPair&gt;</returns>
        List<CurrencyPair> ListCurrencyPairs ();

        /// <summary>
        /// List all currency pairs supported
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CurrencyPair&gt;</returns>
        ApiResponse<List<CurrencyPair>> ListCurrencyPairsWithHttpInfo ();
        /// <summary>
        /// Get detail of one single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>CurrencyPair</returns>
        CurrencyPair GetCurrencyPair (string currencyPair);

        /// <summary>
        /// Get detail of one single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of CurrencyPair</returns>
        ApiResponse<CurrencyPair> GetCurrencyPairWithHttpInfo (string currencyPair);
        /// <summary>
        /// Retrieve ticker information
        /// </summary>
        /// <remarks>
        /// Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;Ticker&gt;</returns>
        List<Ticker> ListTickers (string currencyPair = default(string));

        /// <summary>
        /// Retrieve ticker information
        /// </summary>
        /// <remarks>
        /// Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;Ticker&gt;</returns>
        ApiResponse<List<Ticker>> ListTickersWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// Retrieve order book
        /// </summary>
        /// <remarks>
        /// Order book will be sorted by price from high to low on bids; reversed on asks
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>OrderBook</returns>
        OrderBook ListOrderBook (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));

        /// <summary>
        /// Retrieve order book
        /// </summary>
        /// <remarks>
        /// Order book will be sorted by price from high to low on bids; reversed on asks
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>ApiResponse of OrderBook</returns>
        ApiResponse<OrderBook> ListOrderBookWithHttpInfo (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));
        /// <summary>
        /// Retrieve market trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="lastId">Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)</param>
        /// <param name="reverse">Whether to retrieve records whose IDs are smaller than &#x60;last_id&#x60;&#39;s. Default to larger ones.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <returns>List&lt;Trade&gt;</returns>
        List<Trade> ListTrades (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?));

        /// <summary>
        /// Retrieve market trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="lastId">Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)</param>
        /// <param name="reverse">Whether to retrieve records whose IDs are smaller than &#x60;last_id&#x60;&#39;s. Default to larger ones.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Trade&gt;</returns>
        ApiResponse<List<Trade>> ListTradesWithHttpInfo (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?));
        /// <summary>
        /// Market candlesticks
        /// </summary>
        /// <remarks>
        /// Maximum of 1000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 30m)</param>
        /// <returns>List&lt;List&lt;string&gt;&gt;</returns>
        List<List<string>> ListCandlesticks (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));

        /// <summary>
        /// Market candlesticks
        /// </summary>
        /// <remarks>
        /// Maximum of 1000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 30m)</param>
        /// <returns>ApiResponse of List&lt;List&lt;string&gt;&gt;</returns>
        ApiResponse<List<List<string>>> ListCandlesticksWithHttpInfo (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));
        /// <summary>
        /// Query user trading fee rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>TradeFee</returns>
        TradeFee GetFee (string currencyPair = default(string));

        /// <summary>
        /// Query user trading fee rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>ApiResponse of TradeFee</returns>
        ApiResponse<TradeFee> GetFeeWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// List spot accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieved specified currency related data (optional)</param>
        /// <returns>List&lt;SpotAccount&gt;</returns>
        List<SpotAccount> ListSpotAccounts (string currency = default(string));

        /// <summary>
        /// List spot accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieved specified currency related data (optional)</param>
        /// <returns>ApiResponse of List&lt;SpotAccount&gt;</returns>
        ApiResponse<List<SpotAccount>> ListSpotAccountsWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Create a batch of orders
        /// </summary>
        /// <remarks>
        /// Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>List&lt;BatchOrder&gt;</returns>
        List<BatchOrder> CreateBatchOrders (List<Order> order);

        /// <summary>
        /// Create a batch of orders
        /// </summary>
        /// <remarks>
        /// Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>ApiResponse of List&lt;BatchOrder&gt;</returns>
        ApiResponse<List<BatchOrder>> CreateBatchOrdersWithHttpInfo (List<Order> order);
        /// <summary>
        /// List all open orders
        /// </summary>
        /// <remarks>
        /// List open orders in all currency pairs.  Note that pagination parameters affect record number in each currency pair&#39;s open order list. No pagination is applied to the number of currency pairs returned. All currency pairs with open orders will be returned
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <returns>List&lt;OpenOrders&gt;</returns>
        List<OpenOrders> ListAllOpenOrders (int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List all open orders
        /// </summary>
        /// <remarks>
        /// List open orders in all currency pairs.  Note that pagination parameters affect record number in each currency pair&#39;s open order list. No pagination is applied to the number of currency pairs returned. All currency pairs with open orders will be returned
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;OpenOrders&gt;</returns>
        ApiResponse<List<OpenOrders>> ListAllOpenOrdersWithHttpInfo (int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> ListOrders (string currencyPair, string status, int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> ListOrdersWithHttpInfo (string currencyPair, string status, int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Order</returns>
        Order CreateOrder (Order order);

        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CreateOrderWithHttpInfo (Order order);
        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="side">All bids or asks. Both included in not specified (optional)</param>
        /// <param name="account">Specify account type. Default to all account types being included (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> CancelOrders (string currencyPair, string side = default(string), string account = default(string));

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="side">All bids or asks. Both included in not specified (optional)</param>
        /// <param name="account">Specify account type. Default to all account types being included (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> CancelOrdersWithHttpInfo (string currencyPair, string side = default(string), string account = default(string));
        /// <summary>
        /// Cancel a batch of orders with an ID list
        /// </summary>
        /// <remarks>
        /// Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>List&lt;CancelOrderResult&gt;</returns>
        List<CancelOrderResult> CancelBatchOrders (List<CancelOrder> cancelOrder);

        /// <summary>
        /// Cancel a batch of orders with an ID list
        /// </summary>
        /// <remarks>
        /// Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>ApiResponse of List&lt;CancelOrderResult&gt;</returns>
        ApiResponse<List<CancelOrderResult>> CancelBatchOrdersWithHttpInfo (List<CancelOrder> cancelOrder);
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Order</returns>
        Order GetOrder (string orderId, string currencyPair);

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderWithHttpInfo (string orderId, string currencyPair);
        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Order</returns>
        Order CancelOrder (string orderId, string currencyPair);

        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CancelOrderWithHttpInfo (string orderId, string currencyPair);
        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">List all trades of specified order (optional)</param>
        /// <returns>List&lt;Trade&gt;</returns>
        List<Trade> ListMyTrades (string currencyPair, int? limit = default(int?), int? page = default(int?), string orderId = default(string));

        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">List all trades of specified order (optional)</param>
        /// <returns>ApiResponse of List&lt;Trade&gt;</returns>
        ApiResponse<List<Trade>> ListMyTradesWithHttpInfo (string currencyPair, int? limit = default(int?), int? page = default(int?), string orderId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all currency pairs supported
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CurrencyPair&gt;</returns>
        Task<List<CurrencyPair>> ListCurrencyPairsAsync ();

        /// <summary>
        /// List all currency pairs supported
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CurrencyPair&gt;)</returns>
        Task<ApiResponse<List<CurrencyPair>>> ListCurrencyPairsAsyncWithHttpInfo ();
        /// <summary>
        /// Get detail of one single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of CurrencyPair</returns>
        Task<CurrencyPair> GetCurrencyPairAsync (string currencyPair);

        /// <summary>
        /// Get detail of one single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (CurrencyPair)</returns>
        Task<ApiResponse<CurrencyPair>> GetCurrencyPairAsyncWithHttpInfo (string currencyPair);
        /// <summary>
        /// Retrieve ticker information
        /// </summary>
        /// <remarks>
        /// Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;Ticker&gt;</returns>
        Task<List<Ticker>> ListTickersAsync (string currencyPair = default(string));

        /// <summary>
        /// Retrieve ticker information
        /// </summary>
        /// <remarks>
        /// Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticker&gt;)</returns>
        Task<ApiResponse<List<Ticker>>> ListTickersAsyncWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// Retrieve order book
        /// </summary>
        /// <remarks>
        /// Order book will be sorted by price from high to low on bids; reversed on asks
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>Task of OrderBook</returns>
        Task<OrderBook> ListOrderBookAsync (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));

        /// <summary>
        /// Retrieve order book
        /// </summary>
        /// <remarks>
        /// Order book will be sorted by price from high to low on bids; reversed on asks
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>Task of ApiResponse (OrderBook)</returns>
        Task<ApiResponse<OrderBook>> ListOrderBookAsyncWithHttpInfo (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));
        /// <summary>
        /// Retrieve market trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="lastId">Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)</param>
        /// <param name="reverse">Whether to retrieve records whose IDs are smaller than &#x60;last_id&#x60;&#39;s. Default to larger ones.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <returns>Task of List&lt;Trade&gt;</returns>
        Task<List<Trade>> ListTradesAsync (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?));

        /// <summary>
        /// Retrieve market trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="lastId">Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)</param>
        /// <param name="reverse">Whether to retrieve records whose IDs are smaller than &#x60;last_id&#x60;&#39;s. Default to larger ones.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Trade&gt;)</returns>
        Task<ApiResponse<List<Trade>>> ListTradesAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?));
        /// <summary>
        /// Market candlesticks
        /// </summary>
        /// <remarks>
        /// Maximum of 1000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 30m)</param>
        /// <returns>Task of List&lt;List&lt;string&gt;&gt;</returns>
        Task<List<List<string>>> ListCandlesticksAsync (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));

        /// <summary>
        /// Market candlesticks
        /// </summary>
        /// <remarks>
        /// Maximum of 1000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 30m)</param>
        /// <returns>Task of ApiResponse (List&lt;List&lt;string&gt;&gt;)</returns>
        Task<ApiResponse<List<List<string>>>> ListCandlesticksAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));
        /// <summary>
        /// Query user trading fee rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of TradeFee</returns>
        Task<TradeFee> GetFeeAsync (string currencyPair = default(string));

        /// <summary>
        /// Query user trading fee rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of ApiResponse (TradeFee)</returns>
        Task<ApiResponse<TradeFee>> GetFeeAsyncWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// List spot accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieved specified currency related data (optional)</param>
        /// <returns>Task of List&lt;SpotAccount&gt;</returns>
        Task<List<SpotAccount>> ListSpotAccountsAsync (string currency = default(string));

        /// <summary>
        /// List spot accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieved specified currency related data (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotAccount&gt;)</returns>
        Task<ApiResponse<List<SpotAccount>>> ListSpotAccountsAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Create a batch of orders
        /// </summary>
        /// <remarks>
        /// Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of List&lt;BatchOrder&gt;</returns>
        Task<List<BatchOrder>> CreateBatchOrdersAsync (List<Order> order);

        /// <summary>
        /// Create a batch of orders
        /// </summary>
        /// <remarks>
        /// Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse (List&lt;BatchOrder&gt;)</returns>
        Task<ApiResponse<List<BatchOrder>>> CreateBatchOrdersAsyncWithHttpInfo (List<Order> order);
        /// <summary>
        /// List all open orders
        /// </summary>
        /// <remarks>
        /// List open orders in all currency pairs.  Note that pagination parameters affect record number in each currency pair&#39;s open order list. No pagination is applied to the number of currency pairs returned. All currency pairs with open orders will be returned
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <returns>Task of List&lt;OpenOrders&gt;</returns>
        Task<List<OpenOrders>> ListAllOpenOrdersAsync (int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List all open orders
        /// </summary>
        /// <remarks>
        /// List open orders in all currency pairs.  Note that pagination parameters affect record number in each currency pair&#39;s open order list. No pagination is applied to the number of currency pairs returned. All currency pairs with open orders will be returned
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;OpenOrders&gt;)</returns>
        Task<ApiResponse<List<OpenOrders>>> ListAllOpenOrdersAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        Task<List<Order>> ListOrdersAsync (string currencyPair, string status, int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        Task<ApiResponse<List<Order>>> ListOrdersAsyncWithHttpInfo (string currencyPair, string status, int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of Order</returns>
        Task<Order> CreateOrderAsync (Order order);

        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse (Order)</returns>
        Task<ApiResponse<Order>> CreateOrderAsyncWithHttpInfo (Order order);
        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="side">All bids or asks. Both included in not specified (optional)</param>
        /// <param name="account">Specify account type. Default to all account types being included (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        Task<List<Order>> CancelOrdersAsync (string currencyPair, string side = default(string), string account = default(string));

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="side">All bids or asks. Both included in not specified (optional)</param>
        /// <param name="account">Specify account type. Default to all account types being included (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        Task<ApiResponse<List<Order>>> CancelOrdersAsyncWithHttpInfo (string currencyPair, string side = default(string), string account = default(string));
        /// <summary>
        /// Cancel a batch of orders with an ID list
        /// </summary>
        /// <remarks>
        /// Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of List&lt;CancelOrderResult&gt;</returns>
        Task<List<CancelOrderResult>> CancelBatchOrdersAsync (List<CancelOrder> cancelOrder);

        /// <summary>
        /// Cancel a batch of orders with an ID list
        /// </summary>
        /// <remarks>
        /// Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of ApiResponse (List&lt;CancelOrderResult&gt;)</returns>
        Task<ApiResponse<List<CancelOrderResult>>> CancelBatchOrdersAsyncWithHttpInfo (List<CancelOrder> cancelOrder);
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of Order</returns>
        Task<Order> GetOrderAsync (string orderId, string currencyPair);

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string orderId, string currencyPair);
        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of Order</returns>
        Task<Order> CancelOrderAsync (string orderId, string currencyPair);

        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        Task<ApiResponse<Order>> CancelOrderAsyncWithHttpInfo (string orderId, string currencyPair);
        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">List all trades of specified order (optional)</param>
        /// <returns>Task of List&lt;Trade&gt;</returns>
        Task<List<Trade>> ListMyTradesAsync (string currencyPair, int? limit = default(int?), int? page = default(int?), string orderId = default(string));

        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">List all trades of specified order (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Trade&gt;)</returns>
        Task<ApiResponse<List<Trade>>> ListMyTradesAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), int? page = default(int?), string orderId = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotApi : ISpotApiSync, ISpotApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpotApi : ISpotApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpotApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpotApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpotApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SpotApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all currency pairs supported 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CurrencyPair&gt;</returns>
        public List<CurrencyPair> ListCurrencyPairs ()
        {
             ApiResponse<List<CurrencyPair>> localVarResponse = ListCurrencyPairsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all currency pairs supported 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CurrencyPair&gt;</returns>
        public ApiResponse<List<CurrencyPair>> ListCurrencyPairsWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CurrencyPair>>("/spot/currency_pairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencyPairs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all currency pairs supported 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CurrencyPair&gt;</returns>
        public async Task<List<CurrencyPair>> ListCurrencyPairsAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CurrencyPair>> localVarResponse = await ListCurrencyPairsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all currency pairs supported 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CurrencyPair&gt;)</returns>
        public async Task<ApiResponse<List<CurrencyPair>>> ListCurrencyPairsAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CurrencyPair>>("/spot/currency_pairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencyPairs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detail of one single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>CurrencyPair</returns>
        public CurrencyPair GetCurrencyPair (string currencyPair)
        {
             ApiResponse<CurrencyPair> localVarResponse = GetCurrencyPairWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detail of one single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of CurrencyPair</returns>
        public ApiResponse<CurrencyPair> GetCurrencyPairWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->GetCurrencyPair");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currency_pair", ClientUtils.ParameterToString(currencyPair)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CurrencyPair>("/spot/currency_pairs/{currency_pair}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrencyPair", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detail of one single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of CurrencyPair</returns>
        public async Task<CurrencyPair> GetCurrencyPairAsync (string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<CurrencyPair> localVarResponse = await GetCurrencyPairAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detail of one single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (CurrencyPair)</returns>
        public async Task<ApiResponse<CurrencyPair>> GetCurrencyPairAsyncWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->GetCurrencyPair");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("currency_pair", ClientUtils.ParameterToString(currencyPair)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CurrencyPair>("/spot/currency_pairs/{currency_pair}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrencyPair", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve ticker information Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;Ticker&gt;</returns>
        public List<Ticker> ListTickers (string currencyPair = default(string))
        {
             ApiResponse<List<Ticker>> localVarResponse = ListTickersWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve ticker information Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;Ticker&gt;</returns>
        public ApiResponse<List<Ticker>> ListTickersWithHttpInfo (string currencyPair = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Ticker>>("/spot/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve ticker information Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;Ticker&gt;</returns>
        public async Task<List<Ticker>> ListTickersAsync (string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Ticker>> localVarResponse = await ListTickersAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve ticker information Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticker&gt;)</returns>
        public async Task<ApiResponse<List<Ticker>>> ListTickersAsyncWithHttpInfo (string currencyPair = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Ticker>>("/spot/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve order book Order book will be sorted by price from high to low on bids; reversed on asks
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>OrderBook</returns>
        public OrderBook ListOrderBook (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
             ApiResponse<OrderBook> localVarResponse = ListOrderBookWithHttpInfo(currencyPair, interval, limit, withId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve order book Order book will be sorted by price from high to low on bids; reversed on asks
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>ApiResponse of OrderBook</returns>
        public ApiResponse<OrderBook> ListOrderBookWithHttpInfo (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListOrderBook");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (withId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "with_id", withId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderBook>("/spot/order_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrderBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve order book Order book will be sorted by price from high to low on bids; reversed on asks
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>Task of OrderBook</returns>
        public async Task<OrderBook> ListOrderBookAsync (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
             Io.Gate.GateApi.Client.ApiResponse<OrderBook> localVarResponse = await ListOrderBookAsyncWithHttpInfo(currencyPair, interval, limit, withId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve order book Order book will be sorted by price from high to low on bids; reversed on asks
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>Task of ApiResponse (OrderBook)</returns>
        public async Task<ApiResponse<OrderBook>> ListOrderBookAsyncWithHttpInfo (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListOrderBook");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (withId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "with_id", withId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderBook>("/spot/order_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrderBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve market trades 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="lastId">Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)</param>
        /// <param name="reverse">Whether to retrieve records whose IDs are smaller than &#x60;last_id&#x60;&#39;s. Default to larger ones.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <returns>List&lt;Trade&gt;</returns>
        public List<Trade> ListTrades (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?))
        {
             ApiResponse<List<Trade>> localVarResponse = ListTradesWithHttpInfo(currencyPair, limit, lastId, reverse);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve market trades 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="lastId">Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)</param>
        /// <param name="reverse">Whether to retrieve records whose IDs are smaller than &#x60;last_id&#x60;&#39;s. Default to larger ones.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Trade&gt;</returns>
        public ApiResponse<List<Trade>> ListTradesWithHttpInfo (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListTrades");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Trade>>("/spot/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve market trades 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="lastId">Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)</param>
        /// <param name="reverse">Whether to retrieve records whose IDs are smaller than &#x60;last_id&#x60;&#39;s. Default to larger ones.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <returns>Task of List&lt;Trade&gt;</returns>
        public async Task<List<Trade>> ListTradesAsync (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Trade>> localVarResponse = await ListTradesAsyncWithHttpInfo(currencyPair, limit, lastId, reverse);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve market trades 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="lastId">Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)</param>
        /// <param name="reverse">Whether to retrieve records whose IDs are smaller than &#x60;last_id&#x60;&#39;s. Default to larger ones.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Trade&gt;)</returns>
        public async Task<ApiResponse<List<Trade>>> ListTradesAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListTrades");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Trade>>("/spot/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Market candlesticks Maximum of 1000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 30m)</param>
        /// <returns>List&lt;List&lt;string&gt;&gt;</returns>
        public List<List<string>> ListCandlesticks (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
             ApiResponse<List<List<string>>> localVarResponse = ListCandlesticksWithHttpInfo(currencyPair, limit, from, to, interval);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market candlesticks Maximum of 1000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 30m)</param>
        /// <returns>ApiResponse of List&lt;List&lt;string&gt;&gt;</returns>
        public ApiResponse<List<List<string>>> ListCandlesticksWithHttpInfo (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListCandlesticks");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<List<string>>>("/spot/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Market candlesticks Maximum of 1000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 30m)</param>
        /// <returns>Task of List&lt;List&lt;string&gt;&gt;</returns>
        public async Task<List<List<string>>> ListCandlesticksAsync (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<List<string>>> localVarResponse = await ListCandlesticksAsyncWithHttpInfo(currencyPair, limit, from, to, interval);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market candlesticks Maximum of 1000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 30m)</param>
        /// <returns>Task of ApiResponse (List&lt;List&lt;string&gt;&gt;)</returns>
        public async Task<ApiResponse<List<List<string>>>> ListCandlesticksAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListCandlesticks");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<List<string>>>("/spot/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query user trading fee rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>TradeFee</returns>
        public TradeFee GetFee (string currencyPair = default(string))
        {
             ApiResponse<TradeFee> localVarResponse = GetFeeWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query user trading fee rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>ApiResponse of TradeFee</returns>
        public ApiResponse<TradeFee> GetFeeWithHttpInfo (string currencyPair = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<TradeFee>("/spot/fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query user trading fee rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of TradeFee</returns>
        public async Task<TradeFee> GetFeeAsync (string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<TradeFee> localVarResponse = await GetFeeAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query user trading fee rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of ApiResponse (TradeFee)</returns>
        public async Task<ApiResponse<TradeFee>> GetFeeAsyncWithHttpInfo (string currencyPair = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TradeFee>("/spot/fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spot accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieved specified currency related data (optional)</param>
        /// <returns>List&lt;SpotAccount&gt;</returns>
        public List<SpotAccount> ListSpotAccounts (string currency = default(string))
        {
             ApiResponse<List<SpotAccount>> localVarResponse = ListSpotAccountsWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List spot accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieved specified currency related data (optional)</param>
        /// <returns>ApiResponse of List&lt;SpotAccount&gt;</returns>
        public ApiResponse<List<SpotAccount>> ListSpotAccountsWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SpotAccount>>("/spot/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpotAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spot accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieved specified currency related data (optional)</param>
        /// <returns>Task of List&lt;SpotAccount&gt;</returns>
        public async Task<List<SpotAccount>> ListSpotAccountsAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SpotAccount>> localVarResponse = await ListSpotAccountsAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List spot accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieved specified currency related data (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotAccount&gt;)</returns>
        public async Task<ApiResponse<List<SpotAccount>>> ListSpotAccountsAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SpotAccount>>("/spot/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpotAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of orders Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>List&lt;BatchOrder&gt;</returns>
        public List<BatchOrder> CreateBatchOrders (List<Order> order)
        {
             ApiResponse<List<BatchOrder>> localVarResponse = CreateBatchOrdersWithHttpInfo(order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of orders Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>ApiResponse of List&lt;BatchOrder&gt;</returns>
        public ApiResponse<List<BatchOrder>> CreateBatchOrdersWithHttpInfo (List<Order> order)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling SpotApi->CreateBatchOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = order;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<BatchOrder>>("/spot/batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of orders Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of List&lt;BatchOrder&gt;</returns>
        public async Task<List<BatchOrder>> CreateBatchOrdersAsync (List<Order> order)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<BatchOrder>> localVarResponse = await CreateBatchOrdersAsyncWithHttpInfo(order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a batch of orders Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse (List&lt;BatchOrder&gt;)</returns>
        public async Task<ApiResponse<List<BatchOrder>>> CreateBatchOrdersAsyncWithHttpInfo (List<Order> order)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling SpotApi->CreateBatchOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = order;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<BatchOrder>>("/spot/batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all open orders List open orders in all currency pairs.  Note that pagination parameters affect record number in each currency pair&#39;s open order list. No pagination is applied to the number of currency pairs returned. All currency pairs with open orders will be returned
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <returns>List&lt;OpenOrders&gt;</returns>
        public List<OpenOrders> ListAllOpenOrders (int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<OpenOrders>> localVarResponse = ListAllOpenOrdersWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all open orders List open orders in all currency pairs.  Note that pagination parameters affect record number in each currency pair&#39;s open order list. No pagination is applied to the number of currency pairs returned. All currency pairs with open orders will be returned
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;OpenOrders&gt;</returns>
        public ApiResponse<List<OpenOrders>> ListAllOpenOrdersWithHttpInfo (int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OpenOrders>>("/spot/open_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllOpenOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all open orders List open orders in all currency pairs.  Note that pagination parameters affect record number in each currency pair&#39;s open order list. No pagination is applied to the number of currency pairs returned. All currency pairs with open orders will be returned
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <returns>Task of List&lt;OpenOrders&gt;</returns>
        public async Task<List<OpenOrders>> ListAllOpenOrdersAsync (int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OpenOrders>> localVarResponse = await ListAllOpenOrdersAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all open orders List open orders in all currency pairs.  Note that pagination parameters affect record number in each currency pair&#39;s open order list. No pagination is applied to the number of currency pairs returned. All currency pairs with open orders will be returned
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;OpenOrders&gt;)</returns>
        public async Task<ApiResponse<List<OpenOrders>>> ListAllOpenOrdersAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OpenOrders>>("/spot/open_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllOpenOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> ListOrders (string currencyPair, string status, int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<Order>> localVarResponse = ListOrdersWithHttpInfo(currencyPair, status, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse<List<Order>> ListOrdersWithHttpInfo (string currencyPair, string status, int? page = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListOrders");

            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SpotApi->ListOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Order>>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async Task<List<Order>> ListOrdersAsync (string currencyPair, string status, int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Order>> localVarResponse = await ListOrdersAsyncWithHttpInfo(currencyPair, status, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async Task<ApiResponse<List<Order>>> ListOrdersAsyncWithHttpInfo (string currencyPair, string status, int? page = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListOrders");

            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SpotApi->ListOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Order>>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Order</returns>
        public Order CreateOrder (Order order)
        {
             ApiResponse<Order> localVarResponse = CreateOrderWithHttpInfo(order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse<Order> CreateOrderWithHttpInfo (Order order)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling SpotApi->CreateOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = order;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of Order</returns>
        public async Task<Order> CreateOrderAsync (Order order)
        {
             Io.Gate.GateApi.Client.ApiResponse<Order> localVarResponse = await CreateOrderAsyncWithHttpInfo(order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async Task<ApiResponse<Order>> CreateOrderAsyncWithHttpInfo (Order order)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling SpotApi->CreateOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = order;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="side">All bids or asks. Both included in not specified (optional)</param>
        /// <param name="account">Specify account type. Default to all account types being included (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> CancelOrders (string currencyPair, string side = default(string), string account = default(string))
        {
             ApiResponse<List<Order>> localVarResponse = CancelOrdersWithHttpInfo(currencyPair, side, account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="side">All bids or asks. Both included in not specified (optional)</param>
        /// <param name="account">Specify account type. Default to all account types being included (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse<List<Order>> CancelOrdersWithHttpInfo (string currencyPair, string side = default(string), string account = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->CancelOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<Order>>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="side">All bids or asks. Both included in not specified (optional)</param>
        /// <param name="account">Specify account type. Default to all account types being included (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async Task<List<Order>> CancelOrdersAsync (string currencyPair, string side = default(string), string account = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Order>> localVarResponse = await CancelOrdersAsyncWithHttpInfo(currencyPair, side, account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="side">All bids or asks. Both included in not specified (optional)</param>
        /// <param name="account">Specify account type. Default to all account types being included (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async Task<ApiResponse<List<Order>>> CancelOrdersAsyncWithHttpInfo (string currencyPair, string side = default(string), string account = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->CancelOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<Order>>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a batch of orders with an ID list Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>List&lt;CancelOrderResult&gt;</returns>
        public List<CancelOrderResult> CancelBatchOrders (List<CancelOrder> cancelOrder)
        {
             ApiResponse<List<CancelOrderResult>> localVarResponse = CancelBatchOrdersWithHttpInfo(cancelOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a batch of orders with an ID list Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>ApiResponse of List&lt;CancelOrderResult&gt;</returns>
        public ApiResponse<List<CancelOrderResult>> CancelBatchOrdersWithHttpInfo (List<CancelOrder> cancelOrder)
        {
            // verify the required parameter 'cancelOrder' is set
            if (cancelOrder == null)
                throw new ApiException(400, "Missing required parameter 'cancelOrder' when calling SpotApi->CancelBatchOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cancelOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CancelOrderResult>>("/spot/cancel_batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a batch of orders with an ID list Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of List&lt;CancelOrderResult&gt;</returns>
        public async Task<List<CancelOrderResult>> CancelBatchOrdersAsync (List<CancelOrder> cancelOrder)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CancelOrderResult>> localVarResponse = await CancelBatchOrdersAsyncWithHttpInfo(cancelOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a batch of orders with an ID list Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of ApiResponse (List&lt;CancelOrderResult&gt;)</returns>
        public async Task<ApiResponse<List<CancelOrderResult>>> CancelBatchOrdersAsyncWithHttpInfo (List<CancelOrder> cancelOrder)
        {
            // verify the required parameter 'cancelOrder' is set
            if (cancelOrder == null)
                throw new ApiException(400, "Missing required parameter 'cancelOrder' when calling SpotApi->CancelBatchOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = cancelOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CancelOrderResult>>("/spot/cancel_batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Order</returns>
        public Order GetOrder (string orderId, string currencyPair)
        {
             ApiResponse<Order> localVarResponse = GetOrderWithHttpInfo(orderId, currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse<Order> GetOrderWithHttpInfo (string orderId, string currencyPair)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->GetOrder");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->GetOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of Order</returns>
        public async Task<Order> GetOrderAsync (string orderId, string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<Order> localVarResponse = await GetOrderAsyncWithHttpInfo(orderId, currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string orderId, string currencyPair)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->GetOrder");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->GetOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Order</returns>
        public Order CancelOrder (string orderId, string currencyPair)
        {
             ApiResponse<Order> localVarResponse = CancelOrderWithHttpInfo(orderId, currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse<Order> CancelOrderWithHttpInfo (string orderId, string currencyPair)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->CancelOrder");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->CancelOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of Order</returns>
        public async Task<Order> CancelOrderAsync (string orderId, string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<Order> localVarResponse = await CancelOrderAsyncWithHttpInfo(orderId, currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID returned on order successfully being created</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async Task<ApiResponse<Order>> CancelOrderAsyncWithHttpInfo (string orderId, string currencyPair)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->CancelOrder");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->CancelOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">List all trades of specified order (optional)</param>
        /// <returns>List&lt;Trade&gt;</returns>
        public List<Trade> ListMyTrades (string currencyPair, int? limit = default(int?), int? page = default(int?), string orderId = default(string))
        {
             ApiResponse<List<Trade>> localVarResponse = ListMyTradesWithHttpInfo(currencyPair, limit, page, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">List all trades of specified order (optional)</param>
        /// <returns>ApiResponse of List&lt;Trade&gt;</returns>
        public ApiResponse<List<Trade>> ListMyTradesWithHttpInfo (string currencyPair, int? limit = default(int?), int? page = default(int?), string orderId = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListMyTrades");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Trade>>("/spot/my_trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">List all trades of specified order (optional)</param>
        /// <returns>Task of List&lt;Trade&gt;</returns>
        public async Task<List<Trade>> ListMyTradesAsync (string currencyPair, int? limit = default(int?), int? page = default(int?), string orderId = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Trade>> localVarResponse = await ListMyTradesAsyncWithHttpInfo(currencyPair, limit, page, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records returned in one list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">List all trades of specified order (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Trade&gt;)</returns>
        public async Task<ApiResponse<List<Trade>>> ListMyTradesAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), int? page = default(int?), string orderId = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListMyTrades");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Trade>>("/spot/my_trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
