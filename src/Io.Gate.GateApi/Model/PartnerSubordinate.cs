/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Partner subordinate
    /// </summary>
    [DataContract]
    public partial class PartnerSubordinate :  IEquatable<PartnerSubordinate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartnerSubordinate" /> class.
        /// </summary>
        public PartnerSubordinate()
        {
        }

        /// <summary>
        /// UserID
        /// </summary>
        /// <value>UserID</value>
        [DataMember(Name= "user_id")]
        public long UserID { get; set; }

        /// <summary>
        /// UserJoinTime
        /// </summary>
        /// <value>UserJoinTime</value>
        [DataMember(Name = "user_join_time")]
        public long UserJoinTime { get; set; }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [DataMember(Name = "type")]
        public long Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartnerSubordinate {\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  UserJoinTime: ").Append(UserJoinTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartnerSubordinate);
        }

        /// <summary>
        /// Returns true if PartnerSubordinate instances are equal
        /// </summary>
        /// <param name="input">Instance of PartnerSubordinate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartnerSubordinate input)
        {
            if (input == null)
                return false;

            return
                (this.UserID == input.UserID || this.UserID.Equals(input.UserID) &&
                (this.UserJoinTime == input.UserJoinTime || this.UserJoinTime.Equals(input.UserJoinTime)) &&
                (this.Type == input.Type || this.Type.Equals(input.Type)));
                
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.UserID.GetHashCode();
                hashCode = hashCode * 59 + this.UserJoinTime.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
