/*
 * Gate API v4
 *
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// ContractStat
    /// </summary>
    [DataContract]
    public partial class ContractStat :  IEquatable<ContractStat>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractStat" /> class.
        /// </summary>
        /// <param name="time">Stat timestamp.</param>
        /// <param name="lsrTaker">Long/short account number ratio.</param>
        /// <param name="lsrAccount">Long/short taker size ratio.</param>
        /// <param name="longLiqSize">Long liquidation size.</param>
        /// <param name="shortLiqSize">Short liquidation size.</param>
        /// <param name="openInterest">Open interest.</param>
        public ContractStat(long time = default(long), decimal lsrTaker = default(decimal), decimal lsrAccount = default(decimal), long longLiqSize = default(long), long shortLiqSize = default(long), long openInterest = default(long))
        {
            this.Time = time;
            this.LsrTaker = lsrTaker;
            this.LsrAccount = lsrAccount;
            this.LongLiqSize = longLiqSize;
            this.ShortLiqSize = shortLiqSize;
            this.OpenInterest = openInterest;
        }

        /// <summary>
        /// Stat timestamp
        /// </summary>
        /// <value>Stat timestamp</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public long Time { get; set; }

        /// <summary>
        /// Long/short account number ratio
        /// </summary>
        /// <value>Long/short account number ratio</value>
        [DataMember(Name="lsr_taker", EmitDefaultValue=false)]
        public decimal LsrTaker { get; set; }

        /// <summary>
        /// Long/short taker size ratio
        /// </summary>
        /// <value>Long/short taker size ratio</value>
        [DataMember(Name="lsr_account", EmitDefaultValue=false)]
        public decimal LsrAccount { get; set; }

        /// <summary>
        /// Long liquidation size
        /// </summary>
        /// <value>Long liquidation size</value>
        [DataMember(Name="long_liq_size", EmitDefaultValue=false)]
        public long LongLiqSize { get; set; }

        /// <summary>
        /// Short liquidation size
        /// </summary>
        /// <value>Short liquidation size</value>
        [DataMember(Name="short_liq_size", EmitDefaultValue=false)]
        public long ShortLiqSize { get; set; }

        /// <summary>
        /// Open interest
        /// </summary>
        /// <value>Open interest</value>
        [DataMember(Name="open_interest", EmitDefaultValue=false)]
        public long OpenInterest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractStat {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  LsrTaker: ").Append(LsrTaker).Append("\n");
            sb.Append("  LsrAccount: ").Append(LsrAccount).Append("\n");
            sb.Append("  LongLiqSize: ").Append(LongLiqSize).Append("\n");
            sb.Append("  ShortLiqSize: ").Append(ShortLiqSize).Append("\n");
            sb.Append("  OpenInterest: ").Append(OpenInterest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractStat);
        }

        /// <summary>
        /// Returns true if ContractStat instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractStat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractStat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.LsrTaker == input.LsrTaker ||
                    this.LsrTaker.Equals(input.LsrTaker)
                ) && 
                (
                    this.LsrAccount == input.LsrAccount ||
                    this.LsrAccount.Equals(input.LsrAccount)
                ) && 
                (
                    this.LongLiqSize == input.LongLiqSize ||
                    this.LongLiqSize.Equals(input.LongLiqSize)
                ) && 
                (
                    this.ShortLiqSize == input.ShortLiqSize ||
                    this.ShortLiqSize.Equals(input.ShortLiqSize)
                ) && 
                (
                    this.OpenInterest == input.OpenInterest ||
                    this.OpenInterest.Equals(input.OpenInterest)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.LsrTaker.GetHashCode();
                hashCode = hashCode * 59 + this.LsrAccount.GetHashCode();
                hashCode = hashCode * 59 + this.LongLiqSize.GetHashCode();
                hashCode = hashCode * 59 + this.ShortLiqSize.GetHashCode();
                hashCode = hashCode * 59 + this.OpenInterest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
